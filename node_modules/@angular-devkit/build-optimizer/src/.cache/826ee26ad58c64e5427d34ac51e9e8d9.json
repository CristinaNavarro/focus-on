{"remainingRequest":"/Users/jorgemac/Documents/Development/focuson-frontend/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/jorgemac/Documents/Development/focuson-frontend/node_modules/ngx-monaco-editor/base-editor.js","dependencies":[{"path":"/Users/jorgemac/Documents/Development/focuson-frontend/node_modules/ngx-monaco-editor/base-editor.js","mtime":1529139887730},{"path":"/Users/jorgemac/Documents/Development/focuson-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1526325484405},{"path":"/Users/jorgemac/Documents/Development/focuson-frontend/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525974352000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nvar loadedMonaco = false;\nvar loadPromise;\nvar BaseEditor = /*@__PURE__*/ (function () {\n    function BaseEditor(config) {\n        this.config = config;\n        this.onInit = new EventEmitter();\n    }\n    Object.defineProperty(BaseEditor.prototype, \"options\", {\n        get: function () {\n            return this._options;\n        },\n        set: function (options) {\n            this._options = Object.assign({}, this.config.defaultOptions, options);\n            if (this._editor) {\n                this._editor.dispose();\n                this.initMonaco(options);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BaseEditor.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (loadedMonaco) {\n            // Wait until monaco editor is available\n            loadPromise.then(function () {\n                _this.initMonaco(_this.options);\n            });\n        }\n        else {\n            loadedMonaco = true;\n            loadPromise = new Promise(function (resolve) {\n                var baseUrl = _this.config.baseUrl || 'assets';\n                if (typeof (window.monaco) === 'object') {\n                    resolve();\n                    return;\n                }\n                var onGotAmdLoader = function () {\n                    // Load monaco\n                    window.require.config({ paths: { 'vs': baseUrl + \"/monaco/vs\" } });\n                    window.require(['vs/editor/editor.main'], function () {\n                        if (typeof _this.config.onMonacoLoad === 'function') {\n                            _this.config.onMonacoLoad();\n                        }\n                        _this.initMonaco(_this.options);\n                        resolve();\n                    });\n                };\n                // Load AMD loader if necessary\n                if (!window.require) {\n                    var loaderScript = document.createElement('script');\n                    loaderScript.type = 'text/javascript';\n                    loaderScript.src = baseUrl + \"/monaco/vs/loader.js\";\n                    loaderScript.addEventListener('load', onGotAmdLoader);\n                    document.body.appendChild(loaderScript);\n                }\n                else {\n                    onGotAmdLoader();\n                }\n            });\n        }\n    };\n    BaseEditor.prototype.ngOnDestroy = function () {\n        if (this._windowResizeSubscription) {\n            this._windowResizeSubscription.unsubscribe();\n        }\n        if (this._editor) {\n            this._editor.dispose();\n            this._editor = undefined;\n        }\n    };\n    return BaseEditor;\n}());\nexport { BaseEditor };\n",null]}